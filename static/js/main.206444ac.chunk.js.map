{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","console","log","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","aboutText","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"mMAGe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMM,KAA1C,QAAAD,OAAqDL,EAAMM,OACzEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,OAC5CP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1Lb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAxD,YAKRN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACjBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAASjB,EAAMkB,WAAYT,KAAK,WAAYM,GAAG,2BACnFd,EAAAC,EAAAC,cAAA,SAAOC,UAAS,yBAAAC,OAAwC,UAAbL,EAAMM,KAAe,OAAO,SAAWa,QAAQ,0BAA1F,qBCnBa,SAASC,EAASpB,GAC/B,IADsCqB,EAiBdC,mBAAS,mBAjBKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAiB/BK,EAjB+BH,EAAA,GAiBzBI,EAjByBJ,EAAA,GAmBtC,OACEtB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACA3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAI0B,MAAO,CAACC,MAAoB,SAAd9B,EAAMM,KAAe,QAAQ,SAAUN,EAAM+B,SAC/D9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YAAU0B,MAAO,CAACG,gBAA8B,SAAdhC,EAAMM,KAAe,OAAO,QAC9DwB,MAAoB,SAAd9B,EAAMM,KAAe,QAAQ,QACjCF,UAAU,eACV6B,MAAOP,EACPQ,SAfe,SAACC,GACtBC,QAAQC,IAAI,YACZV,EAAQQ,EAAMG,OAAOL,QAcflB,GAAG,QACHwB,KAAK,OAGTtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBa,QAhClB,WACpBmB,QAAQC,IAAI,yBACZ,IAAIG,EAAUd,EAAKe,cACnBd,EAAQa,GACRxC,EAAM0C,UAAU,2BAA4B,aA4B1C,wBAGAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA7BvB,WACpBmB,QAAQC,IAAI,yBACZ,IAAIG,EAAUd,EAAKiB,cACnBhB,EAAQa,GACRxC,EAAM0C,UAAU,2BAA4B,aAyB1C,yBAKFzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiByB,MAAO,CAACC,MAAoB,SAAd9B,EAAMM,KAAe,QAAQ,SACvEL,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAIuB,EAAKkB,MAAM,KAAKC,OAApB,cAAuCnB,EAAKmB,OAA5C,eACA5C,EAAAC,EAAAC,cAAA,SAAI,KAAMuB,EAAKkB,MAAM,KAAKC,QAC1B5C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIuB,EAAKmB,OAAO,EAAEnB,EAAK,qCC9ChB,SAASoB,EAAM9C,GAO5B,OACFA,EAAM+C,OAAS9C,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAM+C,MAAMtC,KAA7B,gCAAiEuC,KAAK,SACnG/C,EAAAC,EAAAC,cAAA,cAPuB,SAAC8C,GACf,IAAMC,EAAQD,EAAKN,cACnB,OAAOO,EAAMC,OAAO,GAAGV,cAAcS,EAAME,MAAM,GAKjDC,CAAWrD,EAAM+C,MAAMtC,OADjB,KACmCT,EAAM+C,MAAMO,KC8C/CC,MAzCf,WAAe,IAAAlC,EACWC,mBAAS,SADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNf,EADMiB,EAAA,GACAiC,EADAjC,EAAA,GAAAkC,EAEanC,mBAAS,MAFtBoC,EAAAlC,OAAAC,EAAA,EAAAD,CAAAiC,EAAA,GAENV,EAFMW,EAAA,GAECC,EAFDD,EAAA,GAIPhB,EAAY,SAACkB,EAASnD,GAC1BkD,EAAS,CACPL,IAAKM,EACLnD,KAAMA,IAERoD,WAAW,WACRF,EAAS,OACV,OAeJ,OACE1D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KAEJ3B,EAAAC,EAAAC,cAACJ,EAAD,CAAQS,MAAM,YAAYsD,UAAU,WAAWxD,KAAMA,EAAMY,WAftC,WACT,UAAPZ,GACCkD,EAAQ,QACRO,SAASC,KAAKnC,MAAMG,gBAAkB,OACtCU,EAAU,uBAAwB,aAGlCc,EAAQ,SACRO,SAASC,KAAKnC,MAAMG,gBAAiB,QACrCU,EAAU,wBAAyB,eAOzCzC,EAAAC,EAAAC,cAAC2C,EAAD,CAAOC,MAAOA,IACd9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAACiB,EAAD,CAAUsB,UAAWA,EAAWX,QAAQ,kCAAkCzB,KAAMA,OCpCjE2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDdY,IAASC,OACP9E,EAAAC,EAAAC,cAACF,EAAAC,EAAM8E,WAAP,KACE/E,EAAAC,EAAAC,cAAC8E,EAAD,OAEFlB,SAASmB,eAAe,SAM1BjB","file":"static/js/main.206444ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li> \r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n  <label className={`form-check-label text-${props.mode==='light'?'dark':\"light\"}`} htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n</div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\ntitle: PropTypes.string.isRequired,\r\naboutText: PropTypes.string\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase!!\", \"success\")\r\n  };\r\n  const handleLoClick = () => {\r\n    console.log(\"Lowercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!!\", \"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    console.log(\"onChange\");\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"Enter text here\");\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      <h1 style={{color:props.mode ===\"dark\"?\"white\":\"grey\"}}>{props.heading}</h1>\r\n      <div className=\"mb-3\" >\r\n        <textarea style={{backgroundColor:props.mode ===\"dark\"?\"grey\":\"white\", \r\n        color:props.mode ===\"dark\"?\"white\":\"grey\"}}\r\n          className=\"form-control\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          id=\"myBox\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n        Convert to UpperCase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-5\" onClick={handleLoClick}>\r\n        Convert to LowerCase\r\n      </button>\r\n    \r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode ===\"dark\"?\"white\":\"grey\"}}>\r\n        <h1>Your Text Summary</h1>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(\" \").length}</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"enter something to preview here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n         const lower = word.toLowerCase()\r\n         return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n\r\n  return (\r\nprops.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n<strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n</div>\r\n  )\r\n}\r\n","\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React from 'react'\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,np[]\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n  \n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n       setAlert(null);\n    },1500)\n  }\n\n  const toggleMode = ()=>{\n  if(mode==='light'){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark Mode is enabled\", \"success\")\n  }\n  else{\n      setMode(\"light\")\n      document.body.style.backgroundColor =\"white\";\n      showAlert(\"Light Mode is enabled\", \"success\")\n  }\n}\n  return (\n    <>\n{/* <Navbar title={3} aboutText=\"About TextUtils\"/> */}\n<Navbar title=\"TextUtils\" aboutText=\"About us\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n</div>\n    </>\n  );\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}